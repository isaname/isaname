#include "list.h"
#include<assert.h>

// This is the declaration for LList. It is split into two parts
// because it is too big to fit on one book page
// Linked list implementation
using namespace std;
template <typename E> class LList: public List<E> {
private:
  Link<E>* head;       // ??????????? 
  Link<E>* tail;       // ???????????????? 
  Link<E>* curr;       // ??????? 
  int cnt;    	       // ????§Ò???§³ 

  void init() {        // ?????
    curr = tail = head = new Link<E>;
    cnt = 0;
  }

  void removeall() {   // Return link nodes to free store 
    while(head != NULL) {
      curr = head;
      head = head->next;
      delete curr;
    }
  }

public:
  LList(int size=100) { init(); }    // ?????? 
  ~LList() { removeall(); }                   // ????????
  void print() const;                // ????§Ò?????
  void clear() { removeall(); init(); }       // ????§Ò?

  // ????¦Ë?¨°???it??
  void insert(const E& it) {
    curr->next = new Link<E>(it, curr->next);  
    if (tail == curr) tail = curr->next;  //???¦Â??? 
    cnt++;
  }

  void append(const E& it) { // ????it?????§Ò???
    tail = tail->next = new Link<E>(it, NULL);
    cnt++;
  }

  // ??????????????
  E remove() {
    assert(curr->next != NULL);//"No element"
    E it = curr->next->element;      // ????????
    Link<E>* ltemp = curr->next;     // ???????????? 
    if (tail == curr->next) tail = curr; // ????¦Â???
    curr->next = curr->next->next;   // ???§Ò?????? 
    delete ltemp;                    //??????
    cnt--;			     // ????§Ò???§³???
    return it;
  }

  void moveToStart() // ??curr???????§Ò????
    { curr = head; }

  void moveToEnd()   // ??curr???????§Ò?¦Â??
    { curr = tail; }

  // ??curr??????????????????????????????????????? 
  void prev() {
    if (curr == head) return;       // ???????? 
    Link<E>* temp = head;
    // March down list until we find the previous element
    while (temp->next!=curr) temp=temp->next;
    curr = temp;
  }

  // ??curr??????????????????????????¦Â???????????? 
  void next()
    { if (curr != tail) curr = curr->next; }

  int length() const  { return cnt; } // ???????§Ò???§³

  // ??????????¦Ë??
  int currPos() const {
    Link<E>* temp = head;
    int i;
    for (i=0; curr != temp; i++)
      temp = temp->next;
    return i;
  }

  // ??????????§Ò???pos??¦Ë??
  void moveToPos(int pos) {
    assert ((pos>=0)&&(pos<=cnt));//"Position out of range"
    curr = head;
    for(int i=0; i<pos; i++) curr = curr->next;
  }

  const E& getValue() const { // ?????????
    assert(curr->next != NULL);//"No value"
    return curr->next->element;
  }
};
